---
name: FluxRouter Pipeline

"on":
  workflow_dispatch:
  push:
    branches: [main, dev, 'feature/*']
  pull_request:
    branches: [main]

env:
  COMPOSE_PROJECT_NAME: fluxrouter-ci

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install flake8 yamllint
          # Install hadolint for Dockerfile linting
          wget -O hadolint \
            https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      - name: Lint Python code
        run: |
          flake8 backend/app.py --max-line-length=100 --ignore=E501,W503

      - name: Lint YAML files
        run: |
          yamllint -d "{extends: default, rules: {line-length: disable}}" docker-compose.yml .github/workflows/ci.yml

      - name: Lint Dockerfiles
        run: |
          hadolint proxy/Dockerfile
          hadolint web/Dockerfile
          hadolint backend/Dockerfile

      - name: Validate Docker Compose
        run: |
          docker compose config

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment file with secure secret
        run: |
          cp env.example .env
          echo "SECRET_KEY=$(openssl rand -hex 32)" >> .env

      - name: Build Docker images
        run: |
          docker compose build

      - name: Tag Docker images
        if: github.ref == 'refs/heads/main'
        run: |
          # Tag images with commit SHA and latest
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          docker tag fluxrouter-proxy:latest fluxrouter-proxy:$COMMIT_SHA
          docker tag fluxrouter-web:latest fluxrouter-web:$COMMIT_SHA
          docker tag fluxrouter-backend:latest fluxrouter-backend:$COMMIT_SHA
          echo "Tagged images with commit SHA: $COMMIT_SHA"

      - name: Start services with scaling
        run: |
          docker compose up --scale backend=2 -d

      - name: Verify Docker Network Configuration
        run: |
          echo "Verifying that the backend network is isolated..."
          docker network inspect fluxrouter-backend | grep '"Internal": true'
          if [ $? -ne 0 ]; then
            echo "::error::Network 'fluxrouter-backend' is not set to internal: true!"
            docker network inspect fluxrouter-backend
            exit 1
          fi
          echo "✅ Backend network is correctly configured as internal."

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30

          # Check container status
          docker compose ps

          # Check container logs for debugging
          echo "=== Initial Backend Logs ==="
          docker compose logs backend | tail -10
          echo "=== Initial Proxy Logs ==="
          docker compose logs proxy | tail -10
          echo "=== Initial Web Logs ==="
          docker compose logs web | tail -10

          # Wait for backend first (it's independent)
          echo "Waiting for backend to be healthy..."
          timeout 90 bash -c '
            while ! docker inspect fluxrouter-backend \
              --format="{{.State.Health.Status}}" | grep -q healthy; do
              echo "Backend status: $(docker inspect fluxrouter-backend --format="{{.State.Health.Status}}")"
              sleep 5
            done
          '
          echo "✅ Backend is healthy"

          # Wait for web service
          echo "Waiting for web to be healthy..."
          timeout 90 bash -c '
            while ! docker inspect fluxrouter-web \
              --format="{{.State.Health.Status}}" | grep -q healthy; do
              echo "Web status: $(docker inspect fluxrouter-web --format="{{.State.Health.Status}}")"
              sleep 5
            done
          '
          echo "✅ Web is healthy"

          # Finally wait for proxy (depends on others)
          echo "Waiting for proxy to be healthy..."
          timeout 90 bash -c '
            while ! docker inspect fluxrouter-proxy \
              --format="{{.State.Health.Status}}" | grep -q healthy; do
              echo "Proxy status: $(docker inspect fluxrouter-proxy --format="{{.State.Health.Status}}")"
              sleep 5
            done
          '
          echo "✅ Proxy is healthy"

      - name: Run Phase 1 Verification Tests
        run: |
          echo "🧪 Running Phase 1 verification tests..."
          cd tests
          chmod +x phase1-verify.sh phase2-verify.sh test-lib.sh
          CI_MODE=true ./phase1-verify.sh

      - name: Run Phase 2 Verification Tests
        run: |
          echo "🧪 Running Phase 2 verification tests..."
          cd tests
          CI_MODE=true ./phase2-verify.sh

      - name: Run Phase 3 Extended Tests
        run: |
          echo "🧪 Running Phase 3 extended tests..."
          cd tests
          CI_MODE=true ./phase3-extended-tests.sh

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Proxy Logs ==="
          docker compose logs proxy
          echo "=== Web Logs ==="
          docker compose logs web
          echo "=== Backend Logs ==="
          docker compose logs backend

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment file with secure secret
        run: |
          cp env.example .env
          echo "SECRET_KEY=$(openssl rand -hex 32)" >> .env

      - name: Build production images
        run: |
          docker compose build

      - name: Deploy with zero downtime
        run: |
          echo "🚀 Deploying FluxRouter to production..."
          # Stop old containers gracefully
          docker compose down --timeout 30 || true
          # Start new containers with scaling
          docker compose up --scale backend=2 -d
          # Wait for services to be healthy
          echo "⏳ Waiting for services to be healthy..."
          sleep 60
          # Verify deployment
          if curl -k -s https://localhost/api/health | jq -e '.status == "ok"' > /dev/null; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed - rolling back..."
            docker compose down
            exit 1
          fi

      - name: Post-deployment verification
        run: |
          echo "🔍 Running post-deployment verification..."
          # Check all services are healthy
          docker compose ps
          # Test key endpoints
          curl -k -s https://localhost/ > /dev/null
          curl -k -s https://localhost/api/health > /dev/null
          curl -k -s https://localhost/api/info > /dev/null
          echo "✅ Post-deployment verification complete"

      - name: Cleanup old images
        run: |
          docker system prune -f --filter "until=24h"
