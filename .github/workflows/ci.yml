name: FluxRouter Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

env:
  COMPOSE_PROJECT_NAME: fluxrouter-ci

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install flake8 yamllint
        # Install hadolint for Dockerfile linting
        wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/

    - name: Lint Python code
      run: |
        flake8 backend/app.py --max-line-length=100 --ignore=E501,W503

    - name: Lint YAML files
      run: |
        yamllint docker-compose.yml .github/workflows/ci.yml

    - name: Lint Dockerfiles
      run: |
        hadolint proxy/Dockerfile
        hadolint web/Dockerfile
        hadolint backend/Dockerfile

    - name: Validate Docker Compose
      run: |
        docker compose config

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create environment file with secure secret
      run: |
        cp env.example .env
        echo "SECRET_KEY=$(openssl rand -hex 32)" >> .env

    - name: Build Docker images
      run: |
        docker compose build

    - name: Start services
      run: |
        docker compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 30
        
        # Check container status
        docker compose ps
        
        # Wait for health checks
        timeout 60 bash -c '
          while ! docker inspect fluxrouter-proxy --format="{{.State.Health.Status}}" | grep -q healthy; do
            echo "Waiting for proxy to be healthy..."
            sleep 5
          done
        '
        
        timeout 60 bash -c '
          while ! docker inspect fluxrouter-backend --format="{{.State.Health.Status}}" | grep -q healthy; do
            echo "Waiting for backend to be healthy..."
            sleep 5
          done
        '

    - name: Test web server connectivity
      run: |
        # Test main web page
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/)
        if [ "$response" != "200" ]; then
          echo "Web server test failed with HTTP $response"
          exit 1
        fi
        echo "✅ Web server test passed"

    - name: Test backend API endpoints
      run: |
        # Test health endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/health)
        if [ "$response" != "200" ]; then
          echo "API health test failed with HTTP $response"
          exit 1
        fi
        echo "✅ API health test passed"
        
        # Test info endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/info)
        if [ "$response" != "200" ]; then
          echo "API info test failed with HTTP $response"
          exit 1
        fi
        echo "✅ API info test passed"
        
        # Test status endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/status)
        if [ "$response" != "200" ]; then
          echo "API status test failed with HTTP $response"
          exit 1
        fi
        echo "✅ API status test passed"

    - name: Test security headers
      run: |
        # Test security headers
        headers=$(curl -s -I http://localhost/)
        
        if ! echo "$headers" | grep -q "X-Frame-Options: DENY"; then
          echo "❌ X-Frame-Options header missing"
          exit 1
        fi
        echo "✅ X-Frame-Options header present"
        
        if ! echo "$headers" | grep -q "Content-Security-Policy"; then
          echo "❌ Content-Security-Policy header missing"
          exit 1
        fi
        echo "✅ Content-Security-Policy header present"

    - name: Test blocked HTTP methods
      run: |
        # Test TRACE method blocking
        response=$(curl -s -o /dev/null -w "%{http_code}" -X TRACE http://localhost/)
        if [ "$response" != "405" ]; then
          echo "❌ TRACE method not blocked (got HTTP $response)"
          exit 1
        fi
        echo "✅ TRACE method properly blocked"
        
        # Test OPTIONS method blocking
        response=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS http://localhost/)
        if [ "$response" != "405" ]; then
          echo "❌ OPTIONS method not blocked (got HTTP $response)"
          exit 1
        fi
        echo "✅ OPTIONS method properly blocked"

    - name: Test network isolation
      run: |
        # Verify only proxy port is exposed
        exposed_ports=$(docker compose ps --format json | grep -o '"PublishedPort":[0-9]*' | cut -d: -f2 | sort -u)
        if [ "$exposed_ports" != "80" ]; then
          echo "❌ Unexpected ports exposed: $exposed_ports"
          exit 1
        fi
        echo "✅ Network isolation verified - only port 80 exposed"

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Proxy Logs ==="
        docker compose logs proxy
        echo "=== Web Logs ==="
        docker compose logs web
        echo "=== Backend Logs ==="
        docker compose logs backend

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'


