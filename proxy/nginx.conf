# NGINX Reverse Proxy Configuration with Security Hardening
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with proxy information
    log_format proxy '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" '
                     'upstream: $upstream_addr response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log proxy;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Hide NGINX version and server information
    server_tokens off;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;

    # Upstream definition for web servers
    upstream webservers {
        server web:80;
        # Add more servers here for load balancing if needed
        # server web2:80;
    }

    # Upstream definition for backend API servers with load balancing
    upstream backend_api {
        # Use the service name - Docker's internal DNS will round-robin between instances
        server backend:5000 max_fails=3 fail_timeout=30s;
    }

    # HTTP server block - redirect to HTTPS
    server {
        listen 80;
        server_name localhost *.local;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        server_name localhost *.local;

        # Use Docker's internal DNS resolver to handle scaled services.
        # This is crucial for discovering all instances of the backend service.
        resolver 127.0.0.11:53 valid=30s;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        
        # SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Apply rate limiting
        limit_req zone=general burst=20 nodelay;

        # Security: Block unwanted HTTP methods
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            return 405;
        }

        # Security: Block TRACE and OPTIONS methods specifically
        if ($request_method = TRACE) {
            return 405;
        }
        if ($request_method = OPTIONS) {
            return 405;
        }

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Proxy timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # API routes - proxy to backend API servers
        location /api/ {
            # Use variable to force DNS resolution on each request for load balancing
            set $backend_upstream backend:5000;
            proxy_pass http://$backend_upstream;
            proxy_redirect off;
            
            # API-specific headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # CORS headers for API (if needed in future)
            # add_header Access-Control-Allow-Origin "$http_origin" always;
            # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            # add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        }

        # Main location - proxy to web servers
        location / {
            proxy_pass http://webservers;
            proxy_redirect off;
            
            # Additional security headers for proxied content
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }

        # Health check endpoint for the proxy itself
        location /health {
            access_log off;
            return 200 "proxy-healthy\n";
            add_header Content-Type text/plain;
        }

        # Proxy health check to backend
        location /backend-health {
            proxy_pass http://webservers/health;
            access_log off;
        }

        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            return 404;
        }

        # Security: Block access to sensitive files
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
            return 404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Internal health check server (for Docker health checks)
    server {
        listen 8080;
        server_name localhost;
        access_log off;
        
        location /health {
            return 200 "proxy-healthy\n";
            add_header Content-Type text/plain;
        }
        
        location / {
            return 404;
        }
    }

    # Additional server block to handle invalid hosts
    server {
        listen 80 default_server;
        server_name _;
        
        # Return 444 (connection closed) for invalid requests
        return 444;
    }
}
